{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Substack API","text":"<p>An unofficial Python library for interacting with Substack.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Substack API library provides a simple interface to interact with Substack newsletters, users, posts, and categories. This unofficial API wrapper allows you to:</p> <ul> <li>Browse newsletter content</li> <li>Retrieve user profiles and subscriptions</li> <li>Access post content and metadata</li> <li>Discover newsletters by category</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from substack_api import Newsletter, User, Post, Category\n\n# Get information about a newsletter\nnewsletter = Newsletter(\"https://example.substack.com\")\nposts = newsletter.get_posts(limit=5)\n\n# Get information about a user\nuser = User(\"username\")\nsubscriptions = user.get_subscriptions()\n\n# Get information about a post\npost = Post(\"https://example.substack.com/p/post-slug\")\ncontent = post.get_content()\n\n# Browse newsletters by category\ntech_category = Category(name=\"Technology\")\ntech_newsletters = tech_category.get_newsletters()\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple, intuitive API</li> <li>Comprehensive access to Substack data</li> <li>Pagination support for large collections</li> <li>Automatic caching to minimize API calls</li> </ul>"},{"location":"#important-note","title":"Important Note","text":"<p>This is an unofficial API wrapper. It is not affiliated with or endorsed by Substack. Be mindful of Substack's terms of service when using this library.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>The simplest way to install the Substack API library is via pip:</p> <pre><code>pip install substack-api\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>Alternatively, you can install from source:</p> <pre><code>git clone https://github.com/nhagar/substack_api.git\ncd substack_api\npip install -e .\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>The library has minimal dependencies: - <code>requests</code> - For making HTTP requests</p> <p>These dependencies will be automatically installed when you install the package.</p>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#basic-concepts","title":"Basic Concepts","text":"<p>The Substack API library is organized around four main classes:</p> <ul> <li><code>User</code> - Represents a Substack user profile</li> <li><code>Newsletter</code> - Represents a Substack publication</li> <li><code>Post</code> - Represents an individual post on Substack</li> <li><code>Category</code> - Represents a Substack category of newsletters</li> </ul> <p>Each class provides methods to access different aspects of the Substack ecosystem.</p>"},{"location":"user-guide/#working-with-newsletters","title":"Working with Newsletters","text":"<p>The <code>Newsletter</code> class is the main entry point for interacting with Substack publications:</p> <pre><code>from substack_api import Newsletter\n\n# Create a newsletter object\nnewsletter = Newsletter(\"https://example.substack.com\")\n\n# Get recent posts\nrecent_posts = newsletter.get_posts(limit=10)\n\n# Search for posts on a specific topic\nsearch_results = newsletter.search_posts(\"artificial intelligence\")\n\n# Get podcast episodes\npodcasts = newsletter.get_podcasts()\n\n# Get newsletter authors\nauthors = newsletter.get_authors()\n\n# Get recommended newsletters\nrecommendations = newsletter.get_recommendations()\n</code></pre>"},{"location":"user-guide/#working-with-users","title":"Working with Users","text":"<p>The <code>User</code> class allows you to access information about Substack users:</p> <pre><code>from substack_api import User\n\n# Create a user object\nuser = User(\"username\")\n\n# Get basic user information\nuser_id = user.id\nname = user.name\n\n# Get the user's subscriptions\nsubscriptions = user.get_subscriptions()\n\n# Get raw user data\nuser_data = user.get_raw_data()\n</code></pre>"},{"location":"user-guide/#working-with-posts","title":"Working with Posts","text":"<p>The <code>Post</code> class allows you to access information about individual Substack posts:</p> <pre><code>from substack_api import Post\n\n# Create a post object\npost = Post(\"https://example.substack.com/p/post-slug\")\n\n# Get post content\ncontent = post.get_content()\n\n# Get post metadata\nmetadata = post.get_metadata()\n</code></pre>"},{"location":"user-guide/#working-with-categories","title":"Working with Categories","text":"<p>The <code>Category</code> class allows you to discover newsletters by category:</p> <pre><code>from substack_api import Category\n\n# List all available categories\nfrom substack_api.category import list_all_categories\ncategories = list_all_categories()\n\n# Create a category object\ncategory = Category(name=\"Technology\")\n# Or by ID\ncategory = Category(id=12)\n\n# Get newsletters in this category\nnewsletters = category.get_newsletters()\n\n# Get full metadata for newsletters in this category\nnewsletter_metadata = category.get_newsletter_metadata()\n</code></pre>"},{"location":"user-guide/#caching-behavior","title":"Caching Behavior","text":"<p>By default, the library caches API responses to minimize the number of requests. You can force a refresh of the data by passing <code>force_refresh=True</code> to relevant methods:</p> <pre><code># Force refresh of post data\npost.get_metadata(force_refresh=True)\n\n# Force refresh of user data\nuser.get_raw_data(force_refresh=True)\n</code></pre>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section provides detailed documentation for all modules and classes in the Substack API library.</p>"},{"location":"api-reference/#modules","title":"Modules","text":"<ul> <li>User: Access to Substack user profiles and subscriptions</li> <li>Newsletter: Access to Substack publications, posts, and podcasts</li> <li>Post: Access to individual Substack post content and metadata</li> <li>Category: Discovery of newsletters by category</li> </ul> <p>Each module documentation includes:</p> <ul> <li>Class properties and methods</li> <li>Method parameters</li> <li>Return types</li> <li>Example usage</li> </ul>"},{"location":"api-reference/#common-patterns","title":"Common Patterns","text":"<p>Most classes in the library follow these patterns:</p> <ol> <li>Initialization: Create an object by providing an identifier (URL, username, etc.)</li> <li>Data Retrieval: Methods that fetch data from the Substack API</li> <li>Caching: Data is cached to avoid unnecessary API requests</li> <li>Force Refresh: Most methods accept a <code>force_refresh</code> parameter to bypass the cache</li> </ol>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>The library uses standard Python exceptions:</p> <ul> <li><code>requests.exceptions.HTTPError</code>: Raised when an HTTP request fails</li> <li><code>ValueError</code>: Raised when invalid parameters are provided</li> <li><code>KeyError</code>: Raised when expected data is not found in the API response</li> </ul> <p>You should wrap API calls in try/except blocks to handle these exceptions gracefully.</p>"},{"location":"api-reference/category/","title":"Category","text":"<p>The <code>Category</code> class provides access to Substack newsletter categories.</p>"},{"location":"api-reference/category/#module-functions","title":"Module Functions","text":""},{"location":"api-reference/category/#list_all_categories-listtuplestr-int","title":"<code>list_all_categories() -&gt; List[Tuple[str, int]]</code>","text":"<p>Get name/id representations of all newsletter categories.</p>"},{"location":"api-reference/category/#returns","title":"Returns","text":"<ul> <li><code>List[Tuple[str, int]]</code>: List of tuples containing (category_name, category_id)</li> </ul>"},{"location":"api-reference/category/#class-definition","title":"Class Definition","text":"<pre><code>Category(name: Optional[str] = None, id: Optional[int] = None)\n</code></pre>"},{"location":"api-reference/category/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (Optional[str]): The name of the category</li> <li><code>id</code> (Optional[int]): The ID of the category</li> </ul>"},{"location":"api-reference/category/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code>: If neither name nor id is provided, or if the provided name/id is not found</li> </ul>"},{"location":"api-reference/category/#methods","title":"Methods","text":""},{"location":"api-reference/category/#_get_id_from_name-none","title":"<code>_get_id_from_name() -&gt; None</code>","text":"<p>Lookup category ID based on name.</p>"},{"location":"api-reference/category/#raises_1","title":"Raises","text":"<ul> <li><code>ValueError</code>: If the category name is not found</li> </ul>"},{"location":"api-reference/category/#_get_name_from_id-none","title":"<code>_get_name_from_id() -&gt; None</code>","text":"<p>Lookup category name based on ID.</p>"},{"location":"api-reference/category/#raises_2","title":"Raises","text":"<ul> <li><code>ValueError</code>: If the category ID is not found</li> </ul>"},{"location":"api-reference/category/#_fetch_newsletters_dataforce_refresh-bool-false-listdictstr-any","title":"<code>_fetch_newsletters_data(force_refresh: bool = False) -&gt; List[Dict[str, Any]]</code>","text":"<p>Fetch the raw newsletter data from the API and cache it.</p>"},{"location":"api-reference/category/#parameters_1","title":"Parameters","text":"<ul> <li><code>force_refresh</code> (bool): Whether to force a refresh of the data, ignoring the cache</li> </ul>"},{"location":"api-reference/category/#returns_1","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: Full newsletter metadata</li> </ul>"},{"location":"api-reference/category/#get_newsletter_urls-liststr","title":"<code>get_newsletter_urls() -&gt; List[str]</code>","text":"<p>Get only the URLs of newsletters in this category.</p>"},{"location":"api-reference/category/#returns_2","title":"Returns","text":"<ul> <li><code>List[str]</code>: List of newsletter URLs</li> </ul>"},{"location":"api-reference/category/#get_newsletters-listnewsletter","title":"<code>get_newsletters() -&gt; List[Newsletter]</code>","text":"<p>Get Newsletter objects for all newsletters in this category.</p>"},{"location":"api-reference/category/#returns_3","title":"Returns","text":"<ul> <li><code>List[Newsletter]</code>: List of Newsletter objects</li> </ul>"},{"location":"api-reference/category/#get_newsletter_metadata-listdictstr-any","title":"<code>get_newsletter_metadata() -&gt; List[Dict[str, Any]]</code>","text":"<p>Get full metadata for all newsletters in this category.</p>"},{"location":"api-reference/category/#returns_4","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: List of newsletter metadata dictionaries</li> </ul>"},{"location":"api-reference/category/#refresh_data-none","title":"<code>refresh_data() -&gt; None</code>","text":"<p>Force refresh of the newsletter data cache.</p>"},{"location":"api-reference/category/#example-usage","title":"Example Usage","text":"<pre><code>from substack_api import Category\nfrom substack_api.category import list_all_categories\n\n# List all available categories\ncategories = list_all_categories()\nprint(\"Available categories:\")\nfor name, id in categories:\n    print(f\"- {name} (ID: {id})\")\n\n# Create a category object by name\ntech_category = Category(name=\"Technology\")\nprint(f\"Selected category: {tech_category}\")\n\n# Get newsletters in this category\nnewsletters = tech_category.get_newsletters()\nprint(f\"Found {len(newsletters)} newsletters in {tech_category.name} category\")\n\n# Print the first 5 newsletters\nfor i, newsletter in enumerate(newsletters[:5]):\n    print(f\"{i+1}. {newsletter.url}\")\n\n# Get detailed metadata\nmetadata = tech_category.get_newsletter_metadata()\nfor entry in metadata[:3]:\n    print(f\"Newsletter ID: {entry['id']}\")\n    print(f\"Description: {entry.get('description', 'No description')[:100]}...\")\n    print(\"-\" * 40)\n</code></pre>"},{"location":"api-reference/newsletter/","title":"Newsletter","text":"<p>The <code>Newsletter</code> class provides access to Substack publications.</p>"},{"location":"api-reference/newsletter/#class-definition","title":"Class Definition","text":"<pre><code>Newsletter(url: str)\n</code></pre>"},{"location":"api-reference/newsletter/#parameters","title":"Parameters","text":"<ul> <li><code>url</code> (str): The URL of the Substack newsletter</li> </ul>"},{"location":"api-reference/newsletter/#methods","title":"Methods","text":""},{"location":"api-reference/newsletter/#_fetch_paginated_postsparams-dictstr-str-limit-optionalint-none-page_size-int-15-listdictstr-any","title":"<code>_fetch_paginated_posts(params: Dict[str, str], limit: Optional[int] = None, page_size: int = 15) -&gt; List[Dict[str, Any]]</code>","text":"<p>Helper method to fetch paginated posts with different query parameters.</p>"},{"location":"api-reference/newsletter/#parameters_1","title":"Parameters","text":"<ul> <li><code>params</code> (Dict[str, str]): Dictionary of query parameters to include in the API request</li> <li><code>limit</code> (Optional[int]): Maximum number of posts to return</li> <li><code>page_size</code> (int): Number of posts to retrieve per page request</li> </ul>"},{"location":"api-reference/newsletter/#returns","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: List of post data dictionaries</li> </ul>"},{"location":"api-reference/newsletter/#get_postssorting-str-new-limit-optionalint-none-listpost","title":"<code>get_posts(sorting: str = \"new\", limit: Optional[int] = None) -&gt; List[Post]</code>","text":"<p>Get posts from the newsletter with specified sorting.</p>"},{"location":"api-reference/newsletter/#parameters_2","title":"Parameters","text":"<ul> <li><code>sorting</code> (str): Sorting order for the posts (\"new\", \"top\", \"pinned\", or \"community\")</li> <li><code>limit</code> (Optional[int]): Maximum number of posts to return</li> </ul>"},{"location":"api-reference/newsletter/#returns_1","title":"Returns","text":"<ul> <li><code>List[Post]</code>: List of Post objects</li> </ul>"},{"location":"api-reference/newsletter/#search_postsquery-str-limit-optionalint-none-listpost","title":"<code>search_posts(query: str, limit: Optional[int] = None) -&gt; List[Post]</code>","text":"<p>Search posts in the newsletter with the given query.</p>"},{"location":"api-reference/newsletter/#parameters_3","title":"Parameters","text":"<ul> <li><code>query</code> (str): Search query string</li> <li><code>limit</code> (Optional[int]): Maximum number of posts to return</li> </ul>"},{"location":"api-reference/newsletter/#returns_2","title":"Returns","text":"<ul> <li><code>List[Post]</code>: List of Post objects matching the search query</li> </ul>"},{"location":"api-reference/newsletter/#get_podcastslimit-optionalint-none-listpost","title":"<code>get_podcasts(limit: Optional[int] = None) -&gt; List[Post]</code>","text":"<p>Get podcast posts from the newsletter.</p>"},{"location":"api-reference/newsletter/#parameters_4","title":"Parameters","text":"<ul> <li><code>limit</code> (Optional[int]): Maximum number of podcast posts to return</li> </ul>"},{"location":"api-reference/newsletter/#returns_3","title":"Returns","text":"<ul> <li><code>List[Post]</code>: List of Post objects representing podcast posts</li> </ul>"},{"location":"api-reference/newsletter/#get_recommendations-listnewsletter","title":"<code>get_recommendations() -&gt; List[Newsletter]</code>","text":"<p>Get recommended publications for this newsletter.</p>"},{"location":"api-reference/newsletter/#returns_4","title":"Returns","text":"<ul> <li><code>List[Newsletter]</code>: List of recommended Newsletter objects</li> </ul>"},{"location":"api-reference/newsletter/#get_authors-listuser","title":"<code>get_authors() -&gt; List[User]</code>","text":"<p>Get authors of the newsletter.</p>"},{"location":"api-reference/newsletter/#returns_5","title":"Returns","text":"<ul> <li><code>List[User]</code>: List of User objects representing the authors</li> </ul>"},{"location":"api-reference/newsletter/#example-usage","title":"Example Usage","text":"<pre><code>from substack_api import Newsletter\n\n# Create a newsletter object\nnewsletter = Newsletter(\"https://example.substack.com\")\n\n# Get recent posts\nrecent_posts = newsletter.get_posts(limit=5)\nfor post in recent_posts:\n    metadata = post.get_metadata()\n    print(f\"Post: {metadata['title']}\")\n\n# Search for posts on a specific topic\nsearch_results = newsletter.search_posts(\"machine learning\", limit=3)\nfor post in search_results:\n    metadata = post.get_metadata()\n    print(f\"Found: {metadata['title']}\")\n\n# Get podcast episodes\npodcasts = newsletter.get_podcasts(limit=2)\nfor podcast in podcasts:\n    metadata = podcast.get_metadata()\n    print(f\"Podcast: {metadata['title']}\")\n\n# Get newsletter authors\nauthors = newsletter.get_authors()\nfor author in authors:\n    print(f\"Author: {author.name}\")\n\n# Get recommended newsletters\nrecommendations = newsletter.get_recommendations()\nfor rec in recommendations:\n    print(f\"Recommended: {rec.url}\")\n</code></pre>"},{"location":"api-reference/post/","title":"Post","text":"<p>The <code>Post</code> class provides access to individual Substack posts.</p>"},{"location":"api-reference/post/#class-definition","title":"Class Definition","text":"<pre><code>Post(url: str)\n</code></pre>"},{"location":"api-reference/post/#parameters","title":"Parameters","text":"<ul> <li><code>url</code> (str): The URL of the Substack post</li> </ul>"},{"location":"api-reference/post/#methods","title":"Methods","text":""},{"location":"api-reference/post/#_fetch_post_dataforce_refresh-bool-false-dictstr-any","title":"<code>_fetch_post_data(force_refresh: bool = False) -&gt; Dict[str, Any]</code>","text":"<p>Fetch the raw post data from the API and cache it.</p>"},{"location":"api-reference/post/#parameters_1","title":"Parameters","text":"<ul> <li><code>force_refresh</code> (bool): Whether to force a refresh of the data, ignoring the cache</li> </ul>"},{"location":"api-reference/post/#returns","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: Full post metadata</li> </ul>"},{"location":"api-reference/post/#get_metadataforce_refresh-bool-false-dictstr-any","title":"<code>get_metadata(force_refresh: bool = False) -&gt; Dict[str, Any]</code>","text":"<p>Get metadata for the post.</p>"},{"location":"api-reference/post/#parameters_2","title":"Parameters","text":"<ul> <li><code>force_refresh</code> (bool): Whether to force a refresh of the data, ignoring the cache</li> </ul>"},{"location":"api-reference/post/#returns_1","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: Full post metadata</li> </ul>"},{"location":"api-reference/post/#get_contentforce_refresh-bool-false-optionalstr","title":"<code>get_content(force_refresh: bool = False) -&gt; Optional[str]</code>","text":"<p>Get the HTML content of the post.</p>"},{"location":"api-reference/post/#parameters_3","title":"Parameters","text":"<ul> <li><code>force_refresh</code> (bool): Whether to force a refresh of the data, ignoring the cache</li> </ul>"},{"location":"api-reference/post/#returns_2","title":"Returns","text":"<ul> <li><code>Optional[str]</code>: HTML content of the post, or None if not available</li> </ul>"},{"location":"api-reference/post/#example-usage","title":"Example Usage","text":"<pre><code>from substack_api import Post\n\n# Create a post object\npost = Post(\"https://example.substack.com/p/post-slug\")\n\n# Get post metadata\nmetadata = post.get_metadata()\nprint(f\"Title: {metadata['title']}\")\nprint(f\"Published: {metadata['post_date']}\")\n\n# Get post content\ncontent = post.get_content()\nprint(f\"Content length: {len(content) if content else 0}\")\n\n# Check if the post is paywalled\nis_paywalled = metadata.get(\"audience\") == \"only_paid\"\nprint(f\"Paywalled: {is_paywalled}\")\n</code></pre>"},{"location":"api-reference/user/","title":"User","text":"<p>The <code>User</code> class provides access to Substack user profiles.</p>"},{"location":"api-reference/user/#class-definition","title":"Class Definition","text":"<pre><code>User(username: str)\n</code></pre>"},{"location":"api-reference/user/#parameters","title":"Parameters","text":"<ul> <li><code>username</code> (str): The Substack username</li> </ul>"},{"location":"api-reference/user/#methods","title":"Methods","text":""},{"location":"api-reference/user/#_fetch_user_dataforce_refresh-bool-false-dictstr-any","title":"<code>_fetch_user_data(force_refresh: bool = False) -&gt; Dict[str, Any]</code>","text":"<p>Fetch the raw user data from the API and cache it.</p>"},{"location":"api-reference/user/#parameters_1","title":"Parameters","text":"<ul> <li><code>force_refresh</code> (bool): Whether to force a refresh of the data, ignoring the cache</li> </ul>"},{"location":"api-reference/user/#returns","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: Full user profile data</li> </ul>"},{"location":"api-reference/user/#get_raw_dataforce_refresh-bool-false-dictstr-any","title":"<code>get_raw_data(force_refresh: bool = False) -&gt; Dict[str, Any]</code>","text":"<p>Get the complete raw user data.</p>"},{"location":"api-reference/user/#parameters_2","title":"Parameters","text":"<ul> <li><code>force_refresh</code> (bool): Whether to force a refresh of the data, ignoring the cache</li> </ul>"},{"location":"api-reference/user/#returns_1","title":"Returns","text":"<ul> <li><code>Dict[str, Any]</code>: Full user profile data</li> </ul>"},{"location":"api-reference/user/#get_subscriptions-listdictstr-any","title":"<code>get_subscriptions() -&gt; List[Dict[str, Any]]</code>","text":"<p>Get newsletters the user has subscribed to.</p>"},{"location":"api-reference/user/#returns_2","title":"Returns","text":"<ul> <li><code>List[Dict[str, Any]]</code>: List of publications the user subscribes to with domain info</li> </ul>"},{"location":"api-reference/user/#properties","title":"Properties","text":""},{"location":"api-reference/user/#id-int","title":"<code>id</code> -&gt; int","text":"<p>Get the user's unique ID number.</p>"},{"location":"api-reference/user/#name-str","title":"<code>name</code> -&gt; str","text":"<p>Get the user's name.</p>"},{"location":"api-reference/user/#profile_set_up_at-str","title":"<code>profile_set_up_at</code> -&gt; str","text":"<p>Get the date when the user's profile was set up.</p>"},{"location":"api-reference/user/#example-usage","title":"Example Usage","text":"<pre><code>from substack_api import User\n\n# Create a user object\nuser = User(\"username\")\n\n# Get basic user information\nprint(f\"User ID: {user.id}\")\nprint(f\"Name: {user.name}\")\nprint(f\"Profile created: {user.profile_set_up_at}\")\n\n# Get the user's subscriptions\nsubscriptions = user.get_subscriptions()\n\n# Get raw user data\nuser_data = user.get_raw_data()\n</code></pre>"}]}